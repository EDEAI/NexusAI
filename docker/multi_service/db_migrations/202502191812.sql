UPDATE `custom_tools` SET `input_variables`='{"name": "output", "type": "object", "properties": {"content": {"name": "content", "type": "string", "value": "", "display_name": "File Content", "required": true, "max_length": 0}, "file_suffix": {"name": "file_suffix", "type": "string", "value": "", "display_name": "File Suffix", "required": true, "max_length": 0}}, "display_name": "", "to_string_keys": ""}' WHERE  `id`=2;
UPDATE `custom_tools` SET `input_variables`='{"name": "output", "type": "object", "properties": {"content": {"name": "content", "type": "string", "value": "", "display_name": "File Content", "required": true, "max_length": 0}, "file_suffix": {"name": "file_suffix", "type": "string", "value": "", "display_name": "File Suffix", "required": true, "max_length": 0}}, "display_name": "", "to_string_keys": ""}' WHERE  `id`=1;
UPDATE `custom_tools` SET `code`='{"python3":"import os\\nimport uuid\\n\\ndef main(content: str, file_suffix: str) -> dict:\\n    try:\\n        # Generate a random UUID for the file name\\n        unique_id = uuid.uuid4()\\n\\n        # Split the file_suffix by \'.\' and take the last part as the actual suffix\\n        suffix_parts = file_suffix.split(\'.\')\\n        if len(suffix_parts) > 1:\\n            actual_suffix = suffix_parts[-1]\\n        else:\\n            actual_suffix = file_suffix\\n\\n        # Ensure the suffix starts with a dot\\n        if not actual_suffix.startswith(\'.\'):\\n            actual_suffix = f\\".{actual_suffix}\\"\\n\\n        # Construct the file name with the correct suffix\\n        file_name = f\\"{unique_id}{actual_suffix}\\"\\n\\n        # Create the storage directory if it doesn\'t exist\\n        storage_dir = \'/storage\'\\n        os.makedirs(storage_dir, exist_ok=True)\\n\\n        # Create the full storage path\\n        storage_path = os.path.join(storage_dir, file_name)\\n\\n        # Write the content to the file\\n        with open(storage_path, \'w\') as file:\\n            file.write(content)\\n        status = \'True\'\\n    except Exception as e:\\n        # Capture any exception and set the status to the exception message\\n        status = str(e)\\n\\n    # Return the status and the file path\\n    return {\'status\': status, \'file_path\': f\\"file://{storage_path}\\"}"}' WHERE  `id`=2;
UPDATE `custom_tools` SET `code`='{"python3":"import os\\nimport uuid\\n\\ndef main(content: str, file_suffix: str) -> dict:\\n    try:\\n        # Generate a random UUID for the file name\\n        unique_id = uuid.uuid4()\\n\\n        # Split the file_suffix by \'.\' and take the last part as the actual suffix\\n        suffix_parts = file_suffix.split(\'.\')\\n        if len(suffix_parts) > 1:\\n            actual_suffix = suffix_parts[-1]\\n        else:\\n            actual_suffix = file_suffix\\n\\n        # Ensure the suffix starts with a dot\\n        if not actual_suffix.startswith(\'.\'):\\n            actual_suffix = f\\".{actual_suffix}\\"\\n\\n        # Construct the file name with the correct suffix\\n        file_name = f\\"{unique_id}{actual_suffix}\\"\\n\\n        # Create the storage directory if it doesn\'t exist\\n        storage_dir = \'/storage\'\\n        os.makedirs(storage_dir, exist_ok=True)\\n\\n        # Create the full storage path\\n        storage_path = os.path.join(storage_dir, file_name)\\n\\n        # Write the content to the file\\n        with open(storage_path, \'w\') as file:\\n            file.write(content)\\n        status = \'True\'\\n    except Exception as e:\\n        # Capture any exception and set the status to the exception message\\n        status = str(e)\\n\\n    # Return the status and the file path\\n    return {\'status\': status, \'file_path\': f\\"file://{storage_path}\\"}"}' WHERE  `id`=1;
UPDATE `custom_tools` SET `output_variables`='{"name": "output", "type": "object", "properties": {"status": {"name": "status", "type": "string", "value": "", "display_name": "Execution Status", "required": false, "max_length": 0}, "file_path": {"name": "file_path", "type": "file", "value": "", "display_name": "File Path", "required": false, "max_length": 0}}, "display_name": "", "to_string_keys": ""}' WHERE  `id`=2;
UPDATE `custom_tools` SET `output_variables`='{"name": "output", "type": "object", "properties": {"status": {"name": "status", "type": "string", "value": "", "display_name": "Execution Status", "required": false, "max_length": 0}, "file_path": {"name": "file_path", "type": "file", "value": "", "display_name": "File Path", "required": false, "max_length": 0}}, "display_name": "", "to_string_keys": ""}' WHERE  `id`=1;
